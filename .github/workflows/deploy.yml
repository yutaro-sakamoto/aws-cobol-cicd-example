# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: deploy
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: Environment to deploy to
permissions:
  contents: read
  id-token: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
          role-session-name: gh-oidc-${{ github.run_id }}-${{ github.run_attempt }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .npmrc
        run: echo '@yutaro-sakamoto:registry=https://npm.pkg.github.com' >> ~/.npmrc && echo '//npm.pkg.github.com/:_authToken=${{ secrets.GH_PACKAGES_TOKEN }}' >> ~/.npmrc
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: yarn
          cache-dependency-path: yarn.lock
      - run: yarn install
      - name: Set environment variables
        run: "

          \              echo CDK_DEFAULT_REGION=\"${{ secrets.AWS_REGION }}\" >> \"$GITHUB_ENV\" &&

          \              echo CDK_DEFAULT_ACCOUNT=\"${{ secrets.AWS_ID }}\" >> \"$GITHUB_ENV\" &&

          \              echo AWS_CODECONNECTIONS_ARN=\"${{ secrets.AWS_CODECONNECTIONS_ARN }}\" >> \"$GITHUB_ENV\"

          \            "
      - name: Deploy Application Stack
        run: npx cdk deploy --require-approval never --outputs-file cdk-outputs.json aws-cobol-cicd-example-dev
      - name: Start pipeline execution
        run: aws codepipeline start-pipeline-execution --name "$(jq -r '."aws-cobol-cicd-example-dev".applicationPipelineName' cdk-outputs.json)" --region "$CDK_DEFAULT_REGION"
      - name: Deploy Infrastructure Stack
        run: npx cdk deploy --require-approval never --outputs-file cdk-outputs.json aws-cobol-cicd-example-dev-infrastructures
      - name: Deploy EcsDeployPipeline Stack
        run: npx cdk deploy --require-approval never --outputs-file cdk-outputs-ecs-deploy.json aws-cobol-cicd-example-dev-ecs-pipeline
